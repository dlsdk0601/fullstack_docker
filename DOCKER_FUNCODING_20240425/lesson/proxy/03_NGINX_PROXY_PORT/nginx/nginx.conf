user nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events { 
    worker_connections 1024; 
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;    
    sendfile on; # 응답을 보낼때 user 영역 buffer 가 아닌, kernel file buffer 를 사용
    keepalive_timeout 65;

    upstream docker-nginx {
        server nginx:80; # docker 안에 nginx 컨테이너에 80 포트로 접속
    }

    upstream docker-apache {
        server apache:80; # docker 안에 apache 컨테이너에 80 포트로 접
    }

    server {
        listen 8080; # 8080 으로 들어온 요청은 해당 server 로 돌린다.

        location / {
            proxy_pass         http://docker-nginx;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }

    server {
        listen 8081;

        location / {
            proxy_pass         http://docker-apache;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }

   # include /etc/nginx/conf.d/*.conf; 항목은 제거한다. 다른 설정 파일을 들고온다는건데, 한 파일에서 모든걸 끝내기 위해 지우고 여기서 다 처리
}
